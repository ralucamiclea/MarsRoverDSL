/**
 * generated by Xtext 2.10.0
 */
package robot.dSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import robot.dSL.DSLPackage;
import robot.dSL.MovementAction;
import robot.dSL.RightMovementAction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Right Movement Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robot.dSL.impl.RightMovementActionImpl#getRightmove <em>Rightmove</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RightMovementActionImpl extends ActionsImpl implements RightMovementAction
{
  /**
   * The cached value of the '{@link #getRightmove() <em>Rightmove</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightmove()
   * @generated
   * @ordered
   */
  protected MovementAction rightmove;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RightMovementActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.RIGHT_MOVEMENT_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MovementAction getRightmove()
  {
    return rightmove;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightmove(MovementAction newRightmove, NotificationChain msgs)
  {
    MovementAction oldRightmove = rightmove;
    rightmove = newRightmove;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE, oldRightmove, newRightmove);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightmove(MovementAction newRightmove)
  {
    if (newRightmove != rightmove)
    {
      NotificationChain msgs = null;
      if (rightmove != null)
        msgs = ((InternalEObject)rightmove).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE, null, msgs);
      if (newRightmove != null)
        msgs = ((InternalEObject)newRightmove).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE, null, msgs);
      msgs = basicSetRightmove(newRightmove, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE, newRightmove, newRightmove));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE:
        return basicSetRightmove(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE:
        return getRightmove();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE:
        setRightmove((MovementAction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE:
        setRightmove((MovementAction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.RIGHT_MOVEMENT_ACTION__RIGHTMOVE:
        return rightmove != null;
    }
    return super.eIsSet(featureID);
  }

} //RightMovementActionImpl
