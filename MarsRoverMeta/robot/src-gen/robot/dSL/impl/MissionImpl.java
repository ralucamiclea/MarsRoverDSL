/**
 * generated by Xtext 2.10.0
 */
package robot.dSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import robot.dSL.BehaviorName;
import robot.dSL.DSLPackage;
import robot.dSL.EndCondition;
import robot.dSL.Mission;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mission</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robot.dSL.impl.MissionImpl#getName <em>Name</em>}</li>
 *   <li>{@link robot.dSL.impl.MissionImpl#getBehaviorlist <em>Behaviorlist</em>}</li>
 *   <li>{@link robot.dSL.impl.MissionImpl#getEndcondition <em>Endcondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MissionImpl extends MinimalEObjectImpl.Container implements Mission
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBehaviorlist() <em>Behaviorlist</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehaviorlist()
   * @generated
   * @ordered
   */
  protected EList<BehaviorName> behaviorlist;

  /**
   * The cached value of the '{@link #getEndcondition() <em>Endcondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndcondition()
   * @generated
   * @ordered
   */
  protected EndCondition endcondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MissionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.MISSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.MISSION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BehaviorName> getBehaviorlist()
  {
    if (behaviorlist == null)
    {
      behaviorlist = new EObjectContainmentEList<BehaviorName>(BehaviorName.class, this, DSLPackage.MISSION__BEHAVIORLIST);
    }
    return behaviorlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EndCondition getEndcondition()
  {
    return endcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndcondition(EndCondition newEndcondition, NotificationChain msgs)
  {
    EndCondition oldEndcondition = endcondition;
    endcondition = newEndcondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPackage.MISSION__ENDCONDITION, oldEndcondition, newEndcondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEndcondition(EndCondition newEndcondition)
  {
    if (newEndcondition != endcondition)
    {
      NotificationChain msgs = null;
      if (endcondition != null)
        msgs = ((InternalEObject)endcondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPackage.MISSION__ENDCONDITION, null, msgs);
      if (newEndcondition != null)
        msgs = ((InternalEObject)newEndcondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPackage.MISSION__ENDCONDITION, null, msgs);
      msgs = basicSetEndcondition(newEndcondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.MISSION__ENDCONDITION, newEndcondition, newEndcondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DSLPackage.MISSION__BEHAVIORLIST:
        return ((InternalEList<?>)getBehaviorlist()).basicRemove(otherEnd, msgs);
      case DSLPackage.MISSION__ENDCONDITION:
        return basicSetEndcondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.MISSION__NAME:
        return getName();
      case DSLPackage.MISSION__BEHAVIORLIST:
        return getBehaviorlist();
      case DSLPackage.MISSION__ENDCONDITION:
        return getEndcondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.MISSION__NAME:
        setName((String)newValue);
        return;
      case DSLPackage.MISSION__BEHAVIORLIST:
        getBehaviorlist().clear();
        getBehaviorlist().addAll((Collection<? extends BehaviorName>)newValue);
        return;
      case DSLPackage.MISSION__ENDCONDITION:
        setEndcondition((EndCondition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.MISSION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DSLPackage.MISSION__BEHAVIORLIST:
        getBehaviorlist().clear();
        return;
      case DSLPackage.MISSION__ENDCONDITION:
        setEndcondition((EndCondition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.MISSION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DSLPackage.MISSION__BEHAVIORLIST:
        return behaviorlist != null && !behaviorlist.isEmpty();
      case DSLPackage.MISSION__ENDCONDITION:
        return endcondition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MissionImpl
