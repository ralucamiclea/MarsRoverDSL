/**
 * generated by Xtext 2.10.0
 */
package robot.dSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import robot.dSL.Actions;
import robot.dSL.Behavior;
import robot.dSL.DSLPackage;
import robot.dSL.Expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link robot.dSL.impl.BehaviorImpl#getName <em>Name</em>}</li>
 *   <li>{@link robot.dSL.impl.BehaviorImpl#getSensorExpression <em>Sensor Expression</em>}</li>
 *   <li>{@link robot.dSL.impl.BehaviorImpl#getActionlist <em>Actionlist</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BehaviorImpl extends MinimalEObjectImpl.Container implements Behavior
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSensorExpression() <em>Sensor Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensorExpression()
   * @generated
   * @ordered
   */
  protected Expression sensorExpression;

  /**
   * The cached value of the '{@link #getActionlist() <em>Actionlist</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActionlist()
   * @generated
   * @ordered
   */
  protected EList<Actions> actionlist;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BehaviorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.BEHAVIOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.BEHAVIOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getSensorExpression()
  {
    return sensorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSensorExpression(Expression newSensorExpression, NotificationChain msgs)
  {
    Expression oldSensorExpression = sensorExpression;
    sensorExpression = newSensorExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPackage.BEHAVIOR__SENSOR_EXPRESSION, oldSensorExpression, newSensorExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSensorExpression(Expression newSensorExpression)
  {
    if (newSensorExpression != sensorExpression)
    {
      NotificationChain msgs = null;
      if (sensorExpression != null)
        msgs = ((InternalEObject)sensorExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPackage.BEHAVIOR__SENSOR_EXPRESSION, null, msgs);
      if (newSensorExpression != null)
        msgs = ((InternalEObject)newSensorExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPackage.BEHAVIOR__SENSOR_EXPRESSION, null, msgs);
      msgs = basicSetSensorExpression(newSensorExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.BEHAVIOR__SENSOR_EXPRESSION, newSensorExpression, newSensorExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Actions> getActionlist()
  {
    if (actionlist == null)
    {
      actionlist = new EObjectContainmentEList<Actions>(Actions.class, this, DSLPackage.BEHAVIOR__ACTIONLIST);
    }
    return actionlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DSLPackage.BEHAVIOR__SENSOR_EXPRESSION:
        return basicSetSensorExpression(null, msgs);
      case DSLPackage.BEHAVIOR__ACTIONLIST:
        return ((InternalEList<?>)getActionlist()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.BEHAVIOR__NAME:
        return getName();
      case DSLPackage.BEHAVIOR__SENSOR_EXPRESSION:
        return getSensorExpression();
      case DSLPackage.BEHAVIOR__ACTIONLIST:
        return getActionlist();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.BEHAVIOR__NAME:
        setName((String)newValue);
        return;
      case DSLPackage.BEHAVIOR__SENSOR_EXPRESSION:
        setSensorExpression((Expression)newValue);
        return;
      case DSLPackage.BEHAVIOR__ACTIONLIST:
        getActionlist().clear();
        getActionlist().addAll((Collection<? extends Actions>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.BEHAVIOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DSLPackage.BEHAVIOR__SENSOR_EXPRESSION:
        setSensorExpression((Expression)null);
        return;
      case DSLPackage.BEHAVIOR__ACTIONLIST:
        getActionlist().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.BEHAVIOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DSLPackage.BEHAVIOR__SENSOR_EXPRESSION:
        return sensorExpression != null;
      case DSLPackage.BEHAVIOR__ACTIONLIST:
        return actionlist != null && !actionlist.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //BehaviorImpl
