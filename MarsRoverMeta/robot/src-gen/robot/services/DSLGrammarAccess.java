/*
 * generated by Xtext 2.10.0
 */
package robot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MarsRoverExpeditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.MarsRoverExpedition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpeditionSTARTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMissionlistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMissionlistMissionParserRuleCall_1_0 = (RuleCall)cMissionlistAssignment_1.eContents().get(0);
		private final Keyword cExpeditionSTOPKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTasklistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTasklistBehaviorParserRuleCall_3_0 = (RuleCall)cTasklistAssignment_3.eContents().get(0);
		
		//MarsRoverExpedition:
		//	"ExpeditionSTART"
		//	missionlist+=Mission+
		//	"ExpeditionSTOP"
		//	tasklist+=Behavior+;
		@Override public ParserRule getRule() { return rule; }
		
		//"ExpeditionSTART" missionlist+=Mission+ "ExpeditionSTOP" tasklist+=Behavior+
		public Group getGroup() { return cGroup; }
		
		//"ExpeditionSTART"
		public Keyword getExpeditionSTARTKeyword_0() { return cExpeditionSTARTKeyword_0; }
		
		//missionlist+=Mission+
		public Assignment getMissionlistAssignment_1() { return cMissionlistAssignment_1; }
		
		//Mission
		public RuleCall getMissionlistMissionParserRuleCall_1_0() { return cMissionlistMissionParserRuleCall_1_0; }
		
		//"ExpeditionSTOP"
		public Keyword getExpeditionSTOPKeyword_2() { return cExpeditionSTOPKeyword_2; }
		
		//tasklist+=Behavior+
		public Assignment getTasklistAssignment_3() { return cTasklistAssignment_3; }
		
		//Behavior
		public RuleCall getTasklistBehaviorParserRuleCall_3_0() { return cTasklistBehaviorParserRuleCall_3_0; }
	}
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBehaviorlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBehaviorlistBehaviorNameParserRuleCall_2_0 = (RuleCall)cBehaviorlistAssignment_2.eContents().get(0);
		private final Keyword cENDMissionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndconditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndconditionEndConditionParserRuleCall_4_0 = (RuleCall)cEndconditionAssignment_4.eContents().get(0);
		
		//Mission:
		//	"Mission" name=ID
		//	behaviorlist+=BehaviorName+
		//	"ENDMission" endcondition=EndCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//"Mission" name=ID behaviorlist+=BehaviorName+ "ENDMission" endcondition=EndCondition
		public Group getGroup() { return cGroup; }
		
		//"Mission"
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//behaviorlist+=BehaviorName+
		public Assignment getBehaviorlistAssignment_2() { return cBehaviorlistAssignment_2; }
		
		//BehaviorName
		public RuleCall getBehaviorlistBehaviorNameParserRuleCall_2_0() { return cBehaviorlistBehaviorNameParserRuleCall_2_0; }
		
		//"ENDMission"
		public Keyword getENDMissionKeyword_3() { return cENDMissionKeyword_3; }
		
		//endcondition=EndCondition
		public Assignment getEndconditionAssignment_4() { return cEndconditionAssignment_4; }
		
		//EndCondition
		public RuleCall getEndconditionEndConditionParserRuleCall_4_0() { return cEndconditionEndConditionParserRuleCall_4_0; }
	}
	public class EndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.EndCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndAfterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cEndwhenlistAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEndwhenlistEndWhenParserRuleCall_1_0 = (RuleCall)cEndwhenlistAssignment_1.eContents().get(0);
		
		//EndCondition:
		//	EndAfter | endwhenlist+=EndWhen+;
		@Override public ParserRule getRule() { return rule; }
		
		//EndAfter | endwhenlist+=EndWhen+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EndAfter
		public RuleCall getEndAfterParserRuleCall_0() { return cEndAfterParserRuleCall_0; }
		
		//endwhenlist+=EndWhen+
		public Assignment getEndwhenlistAssignment_1() { return cEndwhenlistAssignment_1; }
		
		//EndWhen
		public RuleCall getEndwhenlistEndWhenParserRuleCall_1_0() { return cEndwhenlistEndWhenParserRuleCall_1_0; }
	}
	public class EndAfterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.EndAfter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EndAfter:
		//	"after" time=INT "min";
		@Override public ParserRule getRule() { return rule; }
		
		//"after" time=INT "min"
		public Group getGroup() { return cGroup; }
		
		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//time=INT
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_1_0() { return cTimeINTTerminalRuleCall_1_0; }
		
		//"min"
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
	}
	public class EndWhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.EndWhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cExecutedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimesINTTerminalRuleCall_4_0 = (RuleCall)cTimesAssignment_4.eContents().get(0);
		private final Keyword cTimesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EndWhen:
		//	"If" "Task" name=ID "executed" times=INT "times";
		@Override public ParserRule getRule() { return rule; }
		
		//"If" "Task" name=ID "executed" times=INT "times"
		public Group getGroup() { return cGroup; }
		
		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"Task"
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"executed"
		public Keyword getExecutedKeyword_3() { return cExecutedKeyword_3; }
		
		//times=INT
		public Assignment getTimesAssignment_4() { return cTimesAssignment_4; }
		
		//INT
		public RuleCall getTimesINTTerminalRuleCall_4_0() { return cTimesINTTerminalRuleCall_4_0; }
		
		//"times"
		public Keyword getTimesKeyword_5() { return cTimesKeyword_5; }
	}
	public class BehaviorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.BehaviorName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BehaviorName:
		//	"Task" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"Task" name=ID
		public Group getGroup() { return cGroup; }
		
		//"Task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorExpressionExpressionParserRuleCall_3_0 = (RuleCall)cSensorExpressionAssignment_3.eContents().get(0);
		private final Keyword cTHENKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionlistAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionlistActionsParserRuleCall_5_0 = (RuleCall)cActionlistAssignment_5.eContents().get(0);
		private final Keyword cENDtaskKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Behavior:
		//	"Task" name=ID
		//	"IF" sensorExpression=Expression
		//	"THEN" actionlist+=Actions+
		//	"ENDtask";
		@Override public ParserRule getRule() { return rule; }
		
		//"Task" name=ID "IF" sensorExpression=Expression "THEN" actionlist+=Actions+ "ENDtask"
		public Group getGroup() { return cGroup; }
		
		//"Task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"IF"
		public Keyword getIFKeyword_2() { return cIFKeyword_2; }
		
		//sensorExpression=Expression
		public Assignment getSensorExpressionAssignment_3() { return cSensorExpressionAssignment_3; }
		
		//Expression
		public RuleCall getSensorExpressionExpressionParserRuleCall_3_0() { return cSensorExpressionExpressionParserRuleCall_3_0; }
		
		//"THEN"
		public Keyword getTHENKeyword_4() { return cTHENKeyword_4; }
		
		//actionlist+=Actions+
		public Assignment getActionlistAssignment_5() { return cActionlistAssignment_5; }
		
		//Actions
		public RuleCall getActionlistActionsParserRuleCall_5_0() { return cActionlistActionsParserRuleCall_5_0; }
		
		//"ENDtask"
		public Keyword getENDtaskKeyword_6() { return cENDtaskKeyword_6; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression");
		private final RuleCall cExpression1ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Expression1;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression1
		public RuleCall getExpression1ParserRuleCall() { return cExpression1ParserRuleCall; }
	}
	public class ActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Actions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftMovementActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightMovementActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRotateMovementActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMeasurementActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Actions:
		//	LeftMovementAction | RightMovementAction | RotateMovementAction | MeasurementAction;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftMovementAction | RightMovementAction | RotateMovementAction | MeasurementAction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftMovementAction
		public RuleCall getLeftMovementActionParserRuleCall_0() { return cLeftMovementActionParserRuleCall_0; }
		
		//RightMovementAction
		public RuleCall getRightMovementActionParserRuleCall_1() { return cRightMovementActionParserRuleCall_1; }
		
		//RotateMovementAction
		public RuleCall getRotateMovementActionParserRuleCall_2() { return cRotateMovementActionParserRuleCall_2; }
		
		//MeasurementAction
		public RuleCall getMeasurementActionParserRuleCall_3() { return cMeasurementActionParserRuleCall_3; }
	}
	public class MeasurementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.MeasurementAction");
		private final Assignment cMeasureAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMeasureMAEnumEnumRuleCall_0 = (RuleCall)cMeasureAssignment.eContents().get(0);
		
		//MeasurementAction:
		//	measure=MAEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//measure=MAEnum
		public Assignment getMeasureAssignment() { return cMeasureAssignment; }
		
		//MAEnum
		public RuleCall getMeasureMAEnumEnumRuleCall_0() { return cMeasureMAEnumEnumRuleCall_0; }
	}
	public class LeftMovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.LeftMovementAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftmoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftmoveMovementActionParserRuleCall_1_0 = (RuleCall)cLeftmoveAssignment_1.eContents().get(0);
		
		//LeftMovementAction:
		//	"leftMotor" leftmove=MovementAction;
		@Override public ParserRule getRule() { return rule; }
		
		//"leftMotor" leftmove=MovementAction
		public Group getGroup() { return cGroup; }
		
		//"leftMotor"
		public Keyword getLeftMotorKeyword_0() { return cLeftMotorKeyword_0; }
		
		//leftmove=MovementAction
		public Assignment getLeftmoveAssignment_1() { return cLeftmoveAssignment_1; }
		
		//MovementAction
		public RuleCall getLeftmoveMovementActionParserRuleCall_1_0() { return cLeftmoveMovementActionParserRuleCall_1_0; }
	}
	public class RightMovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RightMovementAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightMotorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRightmoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightmoveMovementActionParserRuleCall_1_0 = (RuleCall)cRightmoveAssignment_1.eContents().get(0);
		
		//RightMovementAction:
		//	"rightMotor" rightmove=MovementAction;
		@Override public ParserRule getRule() { return rule; }
		
		//"rightMotor" rightmove=MovementAction
		public Group getGroup() { return cGroup; }
		
		//"rightMotor"
		public Keyword getRightMotorKeyword_0() { return cRightMotorKeyword_0; }
		
		//rightmove=MovementAction
		public Assignment getRightmoveAssignment_1() { return cRightmoveAssignment_1; }
		
		//MovementAction
		public RuleCall getRightmoveMovementActionParserRuleCall_1_0() { return cRightmoveMovementActionParserRuleCall_1_0; }
	}
	public class RotateMovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RotateMovementAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAroundKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cRotatePointsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDegreesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDegreesINTTerminalRuleCall_4_0 = (RuleCall)cDegreesAssignment_4.eContents().get(0);
		private final Keyword cDegreesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RotateMovementAction:
		//	"rotate" "around" RotatePoints 'for' degrees=INT 'degrees';
		@Override public ParserRule getRule() { return rule; }
		
		//"rotate" "around" RotatePoints 'for' degrees=INT 'degrees'
		public Group getGroup() { return cGroup; }
		
		//"rotate"
		public Keyword getRotateKeyword_0() { return cRotateKeyword_0; }
		
		//"around"
		public Keyword getAroundKeyword_1() { return cAroundKeyword_1; }
		
		//RotatePoints
		public RuleCall getRotatePointsParserRuleCall_2() { return cRotatePointsParserRuleCall_2; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//degrees=INT
		public Assignment getDegreesAssignment_4() { return cDegreesAssignment_4; }
		
		//INT
		public RuleCall getDegreesINTTerminalRuleCall_4_0() { return cDegreesINTTerminalRuleCall_4_0; }
		
		//'degrees'
		public Keyword getDegreesKeyword_5() { return cDegreesKeyword_5; }
	}
	public class RotatePointsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RotatePoints");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftRotatePointParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightRotatePointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMiddleRotatePointParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RotatePoints:
		//	LeftRotatePoint | RightRotatePoint | MiddleRotatePoint;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftRotatePoint | RightRotatePoint | MiddleRotatePoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftRotatePoint
		public RuleCall getLeftRotatePointParserRuleCall_0() { return cLeftRotatePointParserRuleCall_0; }
		
		//RightRotatePoint
		public RuleCall getRightRotatePointParserRuleCall_1() { return cRightRotatePointParserRuleCall_1; }
		
		//MiddleRotatePoint
		public RuleCall getMiddleRotatePointParserRuleCall_2() { return cMiddleRotatePointParserRuleCall_2; }
	}
	public class LeftRotatePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.LeftRotatePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWheelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftdirAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftdirFBEnumEnumRuleCall_2_0 = (RuleCall)cLeftdirAssignment_2.eContents().get(0);
		
		//LeftRotatePoint:
		//	"left" "wheel" leftdir=FBEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"left" "wheel" leftdir=FBEnum
		public Group getGroup() { return cGroup; }
		
		//"left"
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//"wheel"
		public Keyword getWheelKeyword_1() { return cWheelKeyword_1; }
		
		//leftdir=FBEnum
		public Assignment getLeftdirAssignment_2() { return cLeftdirAssignment_2; }
		
		//FBEnum
		public RuleCall getLeftdirFBEnumEnumRuleCall_2_0() { return cLeftdirFBEnumEnumRuleCall_2_0; }
	}
	public class RightRotatePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.RightRotatePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWheelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightdirAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightdirFBEnumEnumRuleCall_2_0 = (RuleCall)cRightdirAssignment_2.eContents().get(0);
		
		//RightRotatePoint:
		//	"right" "wheel" rightdir=FBEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"right" "wheel" rightdir=FBEnum
		public Group getGroup() { return cGroup; }
		
		//"right"
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//"wheel"
		public Keyword getWheelKeyword_1() { return cWheelKeyword_1; }
		
		//rightdir=FBEnum
		public Assignment getRightdirAssignment_2() { return cRightdirAssignment_2; }
		
		//FBEnum
		public RuleCall getRightdirFBEnumEnumRuleCall_2_0() { return cRightdirFBEnumEnumRuleCall_2_0; }
	}
	public class MiddleRotatePointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.MiddleRotatePoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMiddleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMiddledirAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMiddledirLREnumEnumRuleCall_3_0 = (RuleCall)cMiddledirAssignment_3.eContents().get(0);
		
		//MiddleRotatePoint:
		//	'middle' 'to' 'the' middledir=LREnum;
		@Override public ParserRule getRule() { return rule; }
		
		//'middle' 'to' 'the' middledir=LREnum
		public Group getGroup() { return cGroup; }
		
		//'middle'
		public Keyword getMiddleKeyword_0() { return cMiddleKeyword_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//'the'
		public Keyword getTheKeyword_2() { return cTheKeyword_2; }
		
		//middledir=LREnum
		public Assignment getMiddledirAssignment_3() { return cMiddledirAssignment_3; }
		
		//LREnum
		public RuleCall getMiddledirLREnumEnumRuleCall_3_0() { return cMiddledirLREnumEnumRuleCall_3_0; }
	}
	public class MovementActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.MovementAction");
		private final Assignment cActionenumAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cActionenumActionEnumEnumRuleCall_0 = (RuleCall)cActionenumAssignment.eContents().get(0);
		
		//MovementAction:
		//	actionenum=ActionEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//actionenum=ActionEnum
		public Assignment getActionenumAssignment() { return cActionenumAssignment; }
		
		//ActionEnum
		public RuleCall getActionenumActionEnumEnumRuleCall_0() { return cActionenumActionEnumEnumRuleCall_0; }
	}
	public class Expression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDexpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression1 Expression:
		//	Expression2 ({ANDexpression.left=current} "AND" right=Expression2)*
		@Override public ParserRule getRule() { return rule; }
		
		//Expression2 ({ANDexpression.left=current} "AND" right=Expression2)*
		public Group getGroup() { return cGroup; }
		
		//Expression2
		public RuleCall getExpression2ParserRuleCall_0() { return cExpression2ParserRuleCall_0; }
		
		//({ANDexpression.left=current} "AND" right=Expression2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ANDexpression.left=current}
		public Action getANDexpressionLeftAction_1_0() { return cANDexpressionLeftAction_1_0; }
		
		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Expression2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression2
		public RuleCall getRightExpression2ParserRuleCall_1_2_0() { return cRightExpression2ParserRuleCall_1_2_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cORexpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression2 Expression:
		//	Expression3 ({ORexpression.left=current} "OR" right=Expression3)*
		@Override public ParserRule getRule() { return rule; }
		
		//Expression3 ({ORexpression.left=current} "OR" right=Expression3)*
		public Group getGroup() { return cGroup; }
		
		//Expression3
		public RuleCall getExpression3ParserRuleCall_0() { return cExpression3ParserRuleCall_0; }
		
		//({ORexpression.left=current} "OR" right=Expression3)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ORexpression.left=current}
		public Action getORexpressionLeftAction_1_0() { return cORexpressionLeftAction_1_0; }
		
		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=Expression3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression3
		public RuleCall getRightExpression3ParserRuleCall_1_2_0() { return cRightExpression3ParserRuleCall_1_2_0; }
	}
	public class Expression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.Expression3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionBracketParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTouchLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cColorLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDistanceLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEdgeLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expression3 Expression:
		//	ExpressionBracket | TouchLiteral | ColorLiteral | DistanceLiteral | EdgeLiteral
		@Override public ParserRule getRule() { return rule; }
		
		//ExpressionBracket | TouchLiteral | ColorLiteral | DistanceLiteral | EdgeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpressionBracket
		public RuleCall getExpressionBracketParserRuleCall_0() { return cExpressionBracketParserRuleCall_0; }
		
		//TouchLiteral
		public RuleCall getTouchLiteralParserRuleCall_1() { return cTouchLiteralParserRuleCall_1; }
		
		//ColorLiteral
		public RuleCall getColorLiteralParserRuleCall_2() { return cColorLiteralParserRuleCall_2; }
		
		//DistanceLiteral
		public RuleCall getDistanceLiteralParserRuleCall_3() { return cDistanceLiteralParserRuleCall_3; }
		
		//EdgeLiteral
		public RuleCall getEdgeLiteralParserRuleCall_4() { return cEdgeLiteralParserRuleCall_4; }
	}
	public class ExpressionBracketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ExpressionBracket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExpressionBracket:
		//	'(' exp=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' exp=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class TouchLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.TouchLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTouchAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTouchTouchEnumEnumRuleCall_0_0 = (RuleCall)cTouchAssignment_0.eContents().get(0);
		private final Keyword cHitsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TouchLiteral:
		//	touch=TouchEnum 'hits';
		@Override public ParserRule getRule() { return rule; }
		
		//touch=TouchEnum 'hits'
		public Group getGroup() { return cGroup; }
		
		//touch=TouchEnum
		public Assignment getTouchAssignment_0() { return cTouchAssignment_0; }
		
		//TouchEnum
		public RuleCall getTouchTouchEnumEnumRuleCall_0_0() { return cTouchTouchEnumEnumRuleCall_0_0; }
		
		//'hits'
		public Keyword getHitsKeyword_1() { return cHitsKeyword_1; }
	}
	public class ColorLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ColorLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorFrontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSeesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColorColorEnumEnumRuleCall_3_0 = (RuleCall)cColorAssignment_3.eContents().get(0);
		
		//ColorLiteral:
		//	"colorFront" "sees" "color" color=ColorEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"colorFront" "sees" "color" color=ColorEnum
		public Group getGroup() { return cGroup; }
		
		//"colorFront"
		public Keyword getColorFrontKeyword_0() { return cColorFrontKeyword_0; }
		
		//"sees"
		public Keyword getSeesKeyword_1() { return cSeesKeyword_1; }
		
		//"color"
		public Keyword getColorKeyword_2() { return cColorKeyword_2; }
		
		//color=ColorEnum
		public Assignment getColorAssignment_3() { return cColorAssignment_3; }
		
		//ColorEnum
		public RuleCall getColorColorEnumEnumRuleCall_3_0() { return cColorColorEnumEnumRuleCall_3_0; }
	}
	public class DistanceLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.DistanceLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDistanceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDistanceINTTerminalRuleCall_2_0 = (RuleCall)cDistanceAssignment_2.eContents().get(0);
		private final Keyword cCmKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DistanceLiteral:
		//	"object" "at" distance=INT "cm";
		@Override public ParserRule getRule() { return rule; }
		
		//"object" "at" distance=INT "cm"
		public Group getGroup() { return cGroup; }
		
		//"object"
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//distance=INT
		public Assignment getDistanceAssignment_2() { return cDistanceAssignment_2; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_2_0() { return cDistanceINTTerminalRuleCall_2_0; }
		
		//"cm"
		public Keyword getCmKeyword_3() { return cCmKeyword_3; }
	}
	public class EdgeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.EdgeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEdgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEdgeEdgeEnumEnumRuleCall_2_0 = (RuleCall)cEdgeAssignment_2.eContents().get(0);
		
		//EdgeLiteral:
		//	"edge" "at" edge=EdgeEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//"edge" "at" edge=EdgeEnum
		public Group getGroup() { return cGroup; }
		
		//"edge"
		public Keyword getEdgeKeyword_0() { return cEdgeKeyword_0; }
		
		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//edge=EdgeEnum
		public Assignment getEdgeAssignment_2() { return cEdgeAssignment_2; }
		
		//EdgeEnum
		public RuleCall getEdgeEdgeEnumEnumRuleCall_2_0() { return cEdgeEdgeEnumEnumRuleCall_2_0; }
	}
	
	public class MAEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.MAEnum");
		private final EnumLiteralDeclaration cMEASUREEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMEASUREMeasureKeyword_0 = (Keyword)cMEASUREEnumLiteralDeclaration.eContents().get(0);
		
		//enum MAEnum:
		//	MEASURE="measure";
		public EnumRule getRule() { return rule; }
		
		//MEASURE="measure"
		public EnumLiteralDeclaration getMEASUREEnumLiteralDeclaration() { return cMEASUREEnumLiteralDeclaration; }
		
		//"measure"
		public Keyword getMEASUREMeasureKeyword_0() { return cMEASUREMeasureKeyword_0; }
	}
	public class LREnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.LREnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTRightKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LREnum:
		//	LEFT='left' |
		//	RIGHT='right';
		public EnumRule getRule() { return rule; }
		
		//LEFT='left' | RIGHT='right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT='left'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//'left'
		public Keyword getLEFTLeftKeyword_0_0() { return cLEFTLeftKeyword_0_0; }
		
		//RIGHT='right'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }
		
		//'right'
		public Keyword getRIGHTRightKeyword_1_0() { return cRIGHTRightKeyword_1_0; }
	}
	public class FBEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.FBEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORWARDForwardKeyword_0_0 = (Keyword)cFORWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBACKWARDBackwardKeyword_1_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FBEnum:
		//	FORWARD='forward' |
		//	BACKWARD='backward';
		public EnumRule getRule() { return rule; }
		
		//FORWARD='forward' | BACKWARD='backward'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD='forward'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_0() { return cFORWARDEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getFORWARDForwardKeyword_0_0() { return cFORWARDForwardKeyword_0_0; }
		
		//BACKWARD='backward'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_1() { return cBACKWARDEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBACKWARDBackwardKeyword_1_0() { return cBACKWARDBackwardKeyword_1_0; }
	}
	public class ActionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ActionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFORWARDForwardKeyword_0_0 = (Keyword)cFORWARDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBACKWARDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBACKWARDBackwardKeyword_1_0 = (Keyword)cBACKWARDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTOPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTOPStopKeyword_2_0 = (Keyword)cSTOPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ActionEnum:
		//	FORWARD='forward' |
		//	BACKWARD='backward' |
		//	STOP='stop';
		public EnumRule getRule() { return rule; }
		
		//FORWARD='forward' | BACKWARD='backward' | STOP='stop'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FORWARD='forward'
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_0() { return cFORWARDEnumLiteralDeclaration_0; }
		
		//'forward'
		public Keyword getFORWARDForwardKeyword_0_0() { return cFORWARDForwardKeyword_0_0; }
		
		//BACKWARD='backward'
		public EnumLiteralDeclaration getBACKWARDEnumLiteralDeclaration_1() { return cBACKWARDEnumLiteralDeclaration_1; }
		
		//'backward'
		public Keyword getBACKWARDBackwardKeyword_1_0() { return cBACKWARDBackwardKeyword_1_0; }
		
		//STOP='stop'
		public EnumLiteralDeclaration getSTOPEnumLiteralDeclaration_2() { return cSTOPEnumLiteralDeclaration_2; }
		
		//'stop'
		public Keyword getSTOPStopKeyword_2_0() { return cSTOPStopKeyword_2_0; }
	}
	public class EdgeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.EdgeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFRONTLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFRONTLEFTFrontLeftKeyword_0_0 = (Keyword)cFRONTLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFRONTRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFRONTRIGHTFrontRightKeyword_1_0 = (Keyword)cFRONTRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBACKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBACKBackKeyword_2_0 = (Keyword)cBACKEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum EdgeEnum:
		//	FRONTLEFT="frontLeft" |
		//	FRONTRIGHT="frontRight" |
		//	BACK="back";
		public EnumRule getRule() { return rule; }
		
		//FRONTLEFT="frontLeft" | FRONTRIGHT="frontRight" | BACK="back"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FRONTLEFT="frontLeft"
		public EnumLiteralDeclaration getFRONTLEFTEnumLiteralDeclaration_0() { return cFRONTLEFTEnumLiteralDeclaration_0; }
		
		//"frontLeft"
		public Keyword getFRONTLEFTFrontLeftKeyword_0_0() { return cFRONTLEFTFrontLeftKeyword_0_0; }
		
		//FRONTRIGHT="frontRight"
		public EnumLiteralDeclaration getFRONTRIGHTEnumLiteralDeclaration_1() { return cFRONTRIGHTEnumLiteralDeclaration_1; }
		
		//"frontRight"
		public Keyword getFRONTRIGHTFrontRightKeyword_1_0() { return cFRONTRIGHTFrontRightKeyword_1_0; }
		
		//BACK="back"
		public EnumLiteralDeclaration getBACKEnumLiteralDeclaration_2() { return cBACKEnumLiteralDeclaration_2; }
		
		//"back"
		public Keyword getBACKBackKeyword_2_0() { return cBACKBackKeyword_2_0; }
	}
	public class TouchEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.TouchEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTTouchFrontLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHTTouchFrontRightKeyword_1_0 = (Keyword)cRIGHTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TouchEnum:
		//	LEFT='touchFrontLeft' | RIGHT='touchFrontRight';
		public EnumRule getRule() { return rule; }
		
		//LEFT='touchFrontLeft' | RIGHT='touchFrontRight'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT='touchFrontLeft'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//'touchFrontLeft'
		public Keyword getLEFTTouchFrontLeftKeyword_0_0() { return cLEFTTouchFrontLeftKeyword_0_0; }
		
		//RIGHT='touchFrontRight'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_1() { return cRIGHTEnumLiteralDeclaration_1; }
		
		//'touchFrontRight'
		public Keyword getRIGHTTouchFrontRightKeyword_1_0() { return cRIGHTTouchFrontRightKeyword_1_0; }
	}
	public class ColorEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "robot.DSL.ColorEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLACKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLACKBLACKKeyword_1_0 = (Keyword)cBLACKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBLUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBLUEBLUEKeyword_2_0 = (Keyword)cBLUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREENGREENKeyword_3_0 = (Keyword)cGREENEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cYELLOWYELLOWKeyword_4_0 = (Keyword)cYELLOWEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cREDREDKeyword_5_0 = (Keyword)cREDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWHITEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWHITEWHITEKeyword_6_0 = (Keyword)cWHITEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBROWNEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBROWNBROWNKeyword_7_0 = (Keyword)cBROWNEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum ColorEnum:
		//	NONE |
		//	BLACK |
		//	BLUE |
		//	GREEN |
		//	YELLOW |
		//	RED |
		//	WHITE |
		//	BROWN;
		public EnumRule getRule() { return rule; }
		
		//NONE | BLACK | BLUE | GREEN | YELLOW | RED | WHITE | BROWN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }
		
		//'NONE'
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }
		
		//BLACK
		public EnumLiteralDeclaration getBLACKEnumLiteralDeclaration_1() { return cBLACKEnumLiteralDeclaration_1; }
		
		//'BLACK'
		public Keyword getBLACKBLACKKeyword_1_0() { return cBLACKBLACKKeyword_1_0; }
		
		//BLUE
		public EnumLiteralDeclaration getBLUEEnumLiteralDeclaration_2() { return cBLUEEnumLiteralDeclaration_2; }
		
		//'BLUE'
		public Keyword getBLUEBLUEKeyword_2_0() { return cBLUEBLUEKeyword_2_0; }
		
		//GREEN
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_3() { return cGREENEnumLiteralDeclaration_3; }
		
		//'GREEN'
		public Keyword getGREENGREENKeyword_3_0() { return cGREENGREENKeyword_3_0; }
		
		//YELLOW
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_4() { return cYELLOWEnumLiteralDeclaration_4; }
		
		//'YELLOW'
		public Keyword getYELLOWYELLOWKeyword_4_0() { return cYELLOWYELLOWKeyword_4_0; }
		
		//RED
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_5() { return cREDEnumLiteralDeclaration_5; }
		
		//'RED'
		public Keyword getREDREDKeyword_5_0() { return cREDREDKeyword_5_0; }
		
		//WHITE
		public EnumLiteralDeclaration getWHITEEnumLiteralDeclaration_6() { return cWHITEEnumLiteralDeclaration_6; }
		
		//'WHITE'
		public Keyword getWHITEWHITEKeyword_6_0() { return cWHITEWHITEKeyword_6_0; }
		
		//BROWN
		public EnumLiteralDeclaration getBROWNEnumLiteralDeclaration_7() { return cBROWNEnumLiteralDeclaration_7; }
		
		//'BROWN'
		public Keyword getBROWNBROWNKeyword_7_0() { return cBROWNBROWNKeyword_7_0; }
	}
	
	private final MarsRoverExpeditionElements pMarsRoverExpedition;
	private final MissionElements pMission;
	private final EndConditionElements pEndCondition;
	private final EndAfterElements pEndAfter;
	private final EndWhenElements pEndWhen;
	private final BehaviorNameElements pBehaviorName;
	private final BehaviorElements pBehavior;
	private final ExpressionElements pExpression;
	private final ActionsElements pActions;
	private final MeasurementActionElements pMeasurementAction;
	private final MAEnumElements eMAEnum;
	private final LeftMovementActionElements pLeftMovementAction;
	private final RightMovementActionElements pRightMovementAction;
	private final RotateMovementActionElements pRotateMovementAction;
	private final RotatePointsElements pRotatePoints;
	private final LeftRotatePointElements pLeftRotatePoint;
	private final RightRotatePointElements pRightRotatePoint;
	private final MiddleRotatePointElements pMiddleRotatePoint;
	private final LREnumElements eLREnum;
	private final FBEnumElements eFBEnum;
	private final MovementActionElements pMovementAction;
	private final ActionEnumElements eActionEnum;
	private final Expression1Elements pExpression1;
	private final Expression2Elements pExpression2;
	private final Expression3Elements pExpression3;
	private final ExpressionBracketElements pExpressionBracket;
	private final TouchLiteralElements pTouchLiteral;
	private final ColorLiteralElements pColorLiteral;
	private final DistanceLiteralElements pDistanceLiteral;
	private final EdgeLiteralElements pEdgeLiteral;
	private final EdgeEnumElements eEdgeEnum;
	private final TouchEnumElements eTouchEnum;
	private final ColorEnumElements eColorEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMarsRoverExpedition = new MarsRoverExpeditionElements();
		this.pMission = new MissionElements();
		this.pEndCondition = new EndConditionElements();
		this.pEndAfter = new EndAfterElements();
		this.pEndWhen = new EndWhenElements();
		this.pBehaviorName = new BehaviorNameElements();
		this.pBehavior = new BehaviorElements();
		this.pExpression = new ExpressionElements();
		this.pActions = new ActionsElements();
		this.pMeasurementAction = new MeasurementActionElements();
		this.eMAEnum = new MAEnumElements();
		this.pLeftMovementAction = new LeftMovementActionElements();
		this.pRightMovementAction = new RightMovementActionElements();
		this.pRotateMovementAction = new RotateMovementActionElements();
		this.pRotatePoints = new RotatePointsElements();
		this.pLeftRotatePoint = new LeftRotatePointElements();
		this.pRightRotatePoint = new RightRotatePointElements();
		this.pMiddleRotatePoint = new MiddleRotatePointElements();
		this.eLREnum = new LREnumElements();
		this.eFBEnum = new FBEnumElements();
		this.pMovementAction = new MovementActionElements();
		this.eActionEnum = new ActionEnumElements();
		this.pExpression1 = new Expression1Elements();
		this.pExpression2 = new Expression2Elements();
		this.pExpression3 = new Expression3Elements();
		this.pExpressionBracket = new ExpressionBracketElements();
		this.pTouchLiteral = new TouchLiteralElements();
		this.pColorLiteral = new ColorLiteralElements();
		this.pDistanceLiteral = new DistanceLiteralElements();
		this.pEdgeLiteral = new EdgeLiteralElements();
		this.eEdgeEnum = new EdgeEnumElements();
		this.eTouchEnum = new TouchEnumElements();
		this.eColorEnum = new ColorEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("robot.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MarsRoverExpedition:
	//	"ExpeditionSTART"
	//	missionlist+=Mission+
	//	"ExpeditionSTOP"
	//	tasklist+=Behavior+;
	public MarsRoverExpeditionElements getMarsRoverExpeditionAccess() {
		return pMarsRoverExpedition;
	}
	
	public ParserRule getMarsRoverExpeditionRule() {
		return getMarsRoverExpeditionAccess().getRule();
	}
	
	//Mission:
	//	"Mission" name=ID
	//	behaviorlist+=BehaviorName+
	//	"ENDMission" endcondition=EndCondition;
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//EndCondition:
	//	EndAfter | endwhenlist+=EndWhen+;
	public EndConditionElements getEndConditionAccess() {
		return pEndCondition;
	}
	
	public ParserRule getEndConditionRule() {
		return getEndConditionAccess().getRule();
	}
	
	//EndAfter:
	//	"after" time=INT "min";
	public EndAfterElements getEndAfterAccess() {
		return pEndAfter;
	}
	
	public ParserRule getEndAfterRule() {
		return getEndAfterAccess().getRule();
	}
	
	//EndWhen:
	//	"If" "Task" name=ID "executed" times=INT "times";
	public EndWhenElements getEndWhenAccess() {
		return pEndWhen;
	}
	
	public ParserRule getEndWhenRule() {
		return getEndWhenAccess().getRule();
	}
	
	//BehaviorName:
	//	"Task" name=ID;
	public BehaviorNameElements getBehaviorNameAccess() {
		return pBehaviorName;
	}
	
	public ParserRule getBehaviorNameRule() {
		return getBehaviorNameAccess().getRule();
	}
	
	//Behavior:
	//	"Task" name=ID
	//	"IF" sensorExpression=Expression
	//	"THEN" actionlist+=Actions+
	//	"ENDtask";
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//Expression:
	//	Expression1;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Actions:
	//	LeftMovementAction | RightMovementAction | RotateMovementAction | MeasurementAction;
	public ActionsElements getActionsAccess() {
		return pActions;
	}
	
	public ParserRule getActionsRule() {
		return getActionsAccess().getRule();
	}
	
	//MeasurementAction:
	//	measure=MAEnum;
	public MeasurementActionElements getMeasurementActionAccess() {
		return pMeasurementAction;
	}
	
	public ParserRule getMeasurementActionRule() {
		return getMeasurementActionAccess().getRule();
	}
	
	//enum MAEnum:
	//	MEASURE="measure";
	public MAEnumElements getMAEnumAccess() {
		return eMAEnum;
	}
	
	public EnumRule getMAEnumRule() {
		return getMAEnumAccess().getRule();
	}
	
	//LeftMovementAction:
	//	"leftMotor" leftmove=MovementAction;
	public LeftMovementActionElements getLeftMovementActionAccess() {
		return pLeftMovementAction;
	}
	
	public ParserRule getLeftMovementActionRule() {
		return getLeftMovementActionAccess().getRule();
	}
	
	//RightMovementAction:
	//	"rightMotor" rightmove=MovementAction;
	public RightMovementActionElements getRightMovementActionAccess() {
		return pRightMovementAction;
	}
	
	public ParserRule getRightMovementActionRule() {
		return getRightMovementActionAccess().getRule();
	}
	
	//RotateMovementAction:
	//	"rotate" "around" RotatePoints 'for' degrees=INT 'degrees';
	public RotateMovementActionElements getRotateMovementActionAccess() {
		return pRotateMovementAction;
	}
	
	public ParserRule getRotateMovementActionRule() {
		return getRotateMovementActionAccess().getRule();
	}
	
	//RotatePoints:
	//	LeftRotatePoint | RightRotatePoint | MiddleRotatePoint;
	public RotatePointsElements getRotatePointsAccess() {
		return pRotatePoints;
	}
	
	public ParserRule getRotatePointsRule() {
		return getRotatePointsAccess().getRule();
	}
	
	//LeftRotatePoint:
	//	"left" "wheel" leftdir=FBEnum;
	public LeftRotatePointElements getLeftRotatePointAccess() {
		return pLeftRotatePoint;
	}
	
	public ParserRule getLeftRotatePointRule() {
		return getLeftRotatePointAccess().getRule();
	}
	
	//RightRotatePoint:
	//	"right" "wheel" rightdir=FBEnum;
	public RightRotatePointElements getRightRotatePointAccess() {
		return pRightRotatePoint;
	}
	
	public ParserRule getRightRotatePointRule() {
		return getRightRotatePointAccess().getRule();
	}
	
	//MiddleRotatePoint:
	//	'middle' 'to' 'the' middledir=LREnum;
	public MiddleRotatePointElements getMiddleRotatePointAccess() {
		return pMiddleRotatePoint;
	}
	
	public ParserRule getMiddleRotatePointRule() {
		return getMiddleRotatePointAccess().getRule();
	}
	
	//enum LREnum:
	//	LEFT='left' |
	//	RIGHT='right';
	public LREnumElements getLREnumAccess() {
		return eLREnum;
	}
	
	public EnumRule getLREnumRule() {
		return getLREnumAccess().getRule();
	}
	
	//enum FBEnum:
	//	FORWARD='forward' |
	//	BACKWARD='backward';
	public FBEnumElements getFBEnumAccess() {
		return eFBEnum;
	}
	
	public EnumRule getFBEnumRule() {
		return getFBEnumAccess().getRule();
	}
	
	//MovementAction:
	//	actionenum=ActionEnum;
	public MovementActionElements getMovementActionAccess() {
		return pMovementAction;
	}
	
	public ParserRule getMovementActionRule() {
		return getMovementActionAccess().getRule();
	}
	
	//enum ActionEnum:
	//	FORWARD='forward' |
	//	BACKWARD='backward' |
	//	STOP='stop';
	public ActionEnumElements getActionEnumAccess() {
		return eActionEnum;
	}
	
	public EnumRule getActionEnumRule() {
		return getActionEnumAccess().getRule();
	}
	
	//Expression1 Expression:
	//	Expression2 ({ANDexpression.left=current} "AND" right=Expression2)*
	public Expression1Elements getExpression1Access() {
		return pExpression1;
	}
	
	public ParserRule getExpression1Rule() {
		return getExpression1Access().getRule();
	}
	
	//Expression2 Expression:
	//	Expression3 ({ORexpression.left=current} "OR" right=Expression3)*
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//Expression3 Expression:
	//	ExpressionBracket | TouchLiteral | ColorLiteral | DistanceLiteral | EdgeLiteral
	public Expression3Elements getExpression3Access() {
		return pExpression3;
	}
	
	public ParserRule getExpression3Rule() {
		return getExpression3Access().getRule();
	}
	
	//ExpressionBracket:
	//	'(' exp=Expression ')';
	public ExpressionBracketElements getExpressionBracketAccess() {
		return pExpressionBracket;
	}
	
	public ParserRule getExpressionBracketRule() {
		return getExpressionBracketAccess().getRule();
	}
	
	//TouchLiteral:
	//	touch=TouchEnum 'hits';
	public TouchLiteralElements getTouchLiteralAccess() {
		return pTouchLiteral;
	}
	
	public ParserRule getTouchLiteralRule() {
		return getTouchLiteralAccess().getRule();
	}
	
	//ColorLiteral:
	//	"colorFront" "sees" "color" color=ColorEnum;
	public ColorLiteralElements getColorLiteralAccess() {
		return pColorLiteral;
	}
	
	public ParserRule getColorLiteralRule() {
		return getColorLiteralAccess().getRule();
	}
	
	//DistanceLiteral:
	//	"object" "at" distance=INT "cm";
	public DistanceLiteralElements getDistanceLiteralAccess() {
		return pDistanceLiteral;
	}
	
	public ParserRule getDistanceLiteralRule() {
		return getDistanceLiteralAccess().getRule();
	}
	
	//EdgeLiteral:
	//	"edge" "at" edge=EdgeEnum;
	public EdgeLiteralElements getEdgeLiteralAccess() {
		return pEdgeLiteral;
	}
	
	public ParserRule getEdgeLiteralRule() {
		return getEdgeLiteralAccess().getRule();
	}
	
	//enum EdgeEnum:
	//	FRONTLEFT="frontLeft" |
	//	FRONTRIGHT="frontRight" |
	//	BACK="back";
	public EdgeEnumElements getEdgeEnumAccess() {
		return eEdgeEnum;
	}
	
	public EnumRule getEdgeEnumRule() {
		return getEdgeEnumAccess().getRule();
	}
	
	//enum TouchEnum:
	//	LEFT='touchFrontLeft' | RIGHT='touchFrontRight';
	public TouchEnumElements getTouchEnumAccess() {
		return eTouchEnum;
	}
	
	public EnumRule getTouchEnumRule() {
		return getTouchEnumAccess().getRule();
	}
	
	//enum ColorEnum:
	//	NONE |
	//	BLACK |
	//	BLUE |
	//	GREEN |
	//	YELLOW |
	//	RED |
	//	WHITE |
	//	BROWN;
	public ColorEnumElements getColorEnumAccess() {
		return eColorEnum;
	}
	
	public EnumRule getColorEnumRule() {
		return getColorEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
