package robot.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import robot.dSL.MarsRoverExpedition;

@SuppressWarnings("all")
public class SlaveGenerator {
  public static String MainToText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.slave;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.BTConnector;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MainSlave {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BTConnector connector = new BTConnector();");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("NXTConnection connection = connector.waitForConnection(60000,NXTConnection.RAW);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ReadSensors rs = new ReadSensors(connection);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String ReadSensorsToText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.slave;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.hardware.lcd.LCD;");
    _builder.newLine();
    _builder.append("import lejos.hardware.port.SensorPort;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3GyroSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3TouchSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3UltrasonicSensor;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.append("import lejos.robotics.SampleProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ReadSensors {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static EV3TouchSensor touchL, touchR;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static EV3UltrasonicSensor sonar;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SampleProvider touchLeft, touchRight;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SampleProvider distance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public float[] touchLeftSamples, touchRightSamples;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public float[] distanceSamples;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PrintWriter writer;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String tl, tr, d, g;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public EV3GyroSensor gyrosensor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SampleProvider gyro;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public float[] gyroSamples;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ReadSensors(NXTConnection connection){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("gyrosensor = new EV3GyroSensor(SensorPort.S4);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("gyro = gyrosensor.getAngleMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("gyroSamples = new float[gyro.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sonar = new EV3UltrasonicSensor(SensorPort.S3);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchL = new EV3TouchSensor(SensorPort.S1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchR = new EV3TouchSensor(SensorPort.S2);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchLeft = touchL.getTouchMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchRight = touchR.getTouchMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distance = sonar.getDistanceMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchLeftSamples = new float[touchLeft.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchRightSamples = new float[touchRight.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distanceSamples = new float[distance.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer = new PrintWriter(connection.openOutputStream());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("touchLeft.fetchSample(touchLeftSamples, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LCD.drawInt((int) touchLeftSamples[0], 0, 1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(touchLeftSamples[0] > 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tl=\"true\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tl=\"false\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("touchRight.fetchSample(touchRightSamples, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LCD.drawInt((int) touchRightSamples[0], 0, 2);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(touchRightSamples[0] > 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tr=\"true\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("tr=\"false\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("distance.fetchSample(distanceSamples, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LCD.drawString(Float.toString(distanceSamples[0]), 0, 3);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("d= Float.toString(distanceSamples[0]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("gyro.fetchSample(gyroSamples,0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LCD.drawString(Float.toString(gyroSamples[0]), 0, 4);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("g = Float.toString(gyroSamples[0]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.println(tl+\" \"+tr+\" \"+d+\" \"+g);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Thread.sleep(10);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
