package robot.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import robot.dSL.MarsRoverExpedition;

@SuppressWarnings("all")
public class SlaveGenerator {
  public static String MainToText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.slave;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.BTConnector;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MainSlave {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BTConnector connector = new BTConnector();");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("NXTConnection connection = connector.waitForConnection(60000,NXTConnection.RAW);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ModelSlave m = new ModelSlave();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("GetMessageSlave gm = new GetMessageSlave(connection,m);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("gm.start();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ReadSensors rs = new ReadSensors(connection,m);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String ModelToText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.slave;");
    _builder.newLine();
    _builder.append("public class ModelSlave {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean end=false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean doneturning=false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ModelSlave(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String GetMesageToText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.slave;");
    _builder.newLine();
    _builder.append("import java.io.DataInputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.hardware.lcd.LCD;");
    _builder.newLine();
    _builder.append("import lejos.hardware.port.SensorPort;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3GyroSensor;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.append("import lejos.robotics.SampleProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class GetMessageSlave extends Thread {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean bll;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DataInputStream reader;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Byte b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ModelSlave m;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public EV3GyroSensor gyrosensor;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private SampleProvider gyro;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private float[] gyroSamples;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GetMessageSlave(NXTConnection connection, ModelSlave m){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("reader = connection.openDataInputStream();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("this.m=m;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("gyrosensor = new EV3GyroSensor(SensorPort.S4);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("gyro = gyrosensor.getAngleMode();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("gyroSamples = new float[gyro.sampleSize()];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(!bll){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("bll = ((b=reader.readByte())!=\'e\');");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}catch (IOException ex){");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("LCD.drawString(\"error:\", 0, 3);");
    _builder.newLine();
    _builder.append("\t \t\t\t");
    _builder.append("LCD.drawString(ex.getMessage(),0,4);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(b==\'g\'){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int deg=0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("deg = reader.readInt();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (IOException ex) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("LCD.drawString(\"error:\", 0, 3);");
    _builder.newLine();
    _builder.append("\t\t \t\t\t");
    _builder.append("LCD.drawString(ex.getMessage(),0,4);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("gyro.fetchSample(gyroSamples,0);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("float start = gyroSamples[0];");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(deg<0){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("float end = start+deg+5;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(start>end){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("gyro.fetchSample(gyroSamples,0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("start = gyroSamples[0];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("float end = start+deg-5;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("while(start<end){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("gyro.fetchSample(gyroSamples,0);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("start = gyroSamples[0];");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m.doneturning=true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String ReadSensorsToText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.slave;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.hardware.port.SensorPort;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3TouchSensor;");
    _builder.newLine();
    _builder.append("import lejos.hardware.sensor.EV3UltrasonicSensor;");
    _builder.newLine();
    _builder.append("import lejos.remote.nxt.NXTConnection;");
    _builder.newLine();
    _builder.append("import lejos.robotics.SampleProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ReadSensors {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ModelSlave m;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static EV3TouchSensor touchL, touchR;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static EV3UltrasonicSensor sonar;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SampleProvider touchLeft, touchRight;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SampleProvider distance;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public float[] touchLeftSamples, touchRightSamples;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public float[] distanceSamples;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PrintWriter writer;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ReadSensors(NXTConnection connection, ModelSlave m){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchL = new EV3TouchSensor(SensorPort.S1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchR = new EV3TouchSensor(SensorPort.S4);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchLeft = touchL.getTouchMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchRight = touchR.getTouchMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distance = sonar.getDistanceMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchLeftSamples = new float[touchLeft.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("touchRightSamples = new float[touchRight.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("distanceSamples = new float[distance.sampleSize()];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer = new PrintWriter(connection.openOutputStream());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.m=m;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(!m.end){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//touchleft");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("touchLeft.fetchSample(touchLeftSamples, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(touchLeftSamples[0] > 0){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writer.print(\'l\');");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writer.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//touchright");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("touchRight.fetchSample(touchRightSamples, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(touchRightSamples[0] > 0){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writer.print(\'r\');");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writer.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//front ultra");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("distance.fetchSample(distanceSamples, 0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.print(distanceSamples[0]);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//gyro");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(m.doneturning){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m.doneturning=false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writer.print(\'g\');");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("writer.flush();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
