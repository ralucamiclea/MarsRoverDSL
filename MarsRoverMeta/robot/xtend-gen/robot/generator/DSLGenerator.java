/**
 * generated by Xtext 2.10.0
 */
package robot.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import robot.dSL.Behavior;
import robot.dSL.MarsRoverExpedition;
import robot.generator.Auxiliary;
import robot.generator.BehaviorGenerator;
import robot.generator.DriveForwardGenerator;
import robot.generator.GetMessageGenerator;
import robot.generator.GoalsGenerator;
import robot.generator.MainGenerator;
import robot.generator.ModelGenerator;
import robot.generator.SlaveGenerator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    EObject _head = IteratorExtensions.<EObject>head(_allContents);
    final MarsRoverExpedition root = ((MarsRoverExpedition) _head);
    boolean _notEquals = (!Objects.equal(root, null));
    if (_notEquals) {
      CharSequence _text = MainGenerator.toText(root);
      fsa.generateFile("/Master/MainMaster.java", _text);
      CharSequence _text_1 = DriveForwardGenerator.toText(root);
      fsa.generateFile("/Master/DriveForward.java", _text_1);
      CharSequence _text_2 = GetMessageGenerator.toText(root);
      fsa.generateFile("/Master/GetMessageMaster.java", _text_2);
      CharSequence _text_3 = GoalsGenerator.toText(root);
      fsa.generateFile("/Master/Goals.java", _text_3);
      CharSequence _text_4 = ModelGenerator.toText(root);
      fsa.generateFile("/Master/ModelMaster.java", _text_4);
      String _MainToText = SlaveGenerator.MainToText(root);
      fsa.generateFile("/Slave/MainSlave.java", _MainToText);
      String _ReadSensorsToText = SlaveGenerator.ReadSensorsToText(root);
      fsa.generateFile("/Slave/ReadSensors.java", _ReadSensorsToText);
      List<Behavior> b = new ArrayList<Behavior>();
      List<Behavior> _behaviors = Auxiliary.getBehaviors(root);
      b = _behaviors;
      for (final Behavior i : b) {
        String _name = i.getName();
        String _class = Auxiliary.toClass(_name);
        String _plus = ("/Master/" + _class);
        String _plus_1 = (_plus + ".java");
        CharSequence _text_5 = BehaviorGenerator.toText(i);
        fsa.generateFile(_plus_1, _text_5);
      }
    }
  }
}
