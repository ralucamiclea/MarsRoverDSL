package robot.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import robot.dSL.MarsRoverExpedition;

@SuppressWarnings("all")
public class GetMessageGenerator {
  public static CharSequence toText(final MarsRoverExpedition expedition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package test.master;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.TimeUnit;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import lejos.hardware.lcd.LCD;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class GetMessageMaster extends Thread {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ModelMaster m;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private byte b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GetMessageMaster(ModelMaster m){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.m=m;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String s = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("s = m.reader.readLine();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(s.length() > 0){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String[] a = s.split(\" \");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m.drawReceived(s);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(a[0]==\"true\")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m.touchFrontLeft=true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m.touchFrontLeft=false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(a[1]==\"true\")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m.touchFrontRight=true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m.touchFrontRight=false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m.d = Float.valueOf(a[2]);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m.g = Float.valueOf(a[3]);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Thread.sleep(100);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
